import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { supabase } from "../utils/supabase";
import Autocomplete from "react-google-autocomplete";
import { useRef } from 'react';
import { APIProvider, useMapsLibrary } from '@vis.gl/react-google-maps';

function roundToNearest9(num) {
  let rounded = Math.round(num);
  const lastDigit = rounded % 10;
  if (lastDigit === 9) return rounded;
  if (lastDigit < 9) return rounded + (9 - lastDigit);
  return rounded + (19 - lastDigit);
}

// const AddressAutocomplete = ({ value, onChange, onAddressSelect }) => {
//   const [placeAutocomplete, setPlaceAutocomplete] = useState(null);
//   const inputRef = useRef(null);
//   const places = useMapsLibrary('places');

//   useEffect(() => {
//     if (!places || !inputRef.current) return;

//     const options = {
//       types: ['address'],
//       componentRestrictions: { country: ['in'] },
//       fields: ['formatted_address', 'address_components', 'geometry']
//     };

//     setPlaceAutocomplete(new places.Autocomplete(inputRef.current, options));
//   }, [places]);

//   useEffect(() => {
//     if (!placeAutocomplete) return;

//     placeAutocomplete.addListener('place_changed', () => {
//       const place = placeAutocomplete.getPlace();
//       if (place.formatted_address) {
//         onAddressSelect(place.formatted_address);
//       }
//     });
//   }, [placeAutocomplete, onAddressSelect]);

//   return (
//     <textarea
//       ref={inputRef}
//       value={value}
//       onChange={onChange}
//       placeholder="Enter pickup address"
//       rows={3}
//       required
//       className="w-full border rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500"
//     />
//   );
// };





export default function ArtistUploadWork({ categories, onUploadSuccess }) {
  const navigate = useNavigate();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const productId = queryParams.get("id");

  const [user, setUser] = useState(null);
  const [artistId, setArtistId] = useState(null);

  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [category, setCategory] = useState("");
  const [cost, setCost] = useState("");
  const [material, setMaterial] = useState("");

  const [images, setImages] = useState([]);
  const [previewUrls, setPreviewUrls] = useState([]);
  const [video, setVideo] = useState(null);
  const [videoPreview, setVideoPreview] = useState("");

  const [loading, setLoading] = useState(false);

  const zoomStep = 0.25;
  const maxZoom = 3;
  const minZoom = 1;
  const [imageViewerOpen, setImageViewerOpen] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [zoom, setZoom] = useState(1);
  const [pickupAddress, setPickupAddress] = useState("");

  const defaultCategories = [
    "Portrait",
    "Landscape",
    "Abstract",
    "Watercolor",
    "Oil",
    "Digital",
    "Sketch",
    "Modern",
    "Classic",
    "Calligraphy",
  ];
  const selectableCategories = categories ?? defaultCategories;
  const [length, setLength] = useState("");
  const [width, setWidth] = useState("");
  const [height, setHeight] = useState("");
  const [weight, setWeight] = useState("");
  const [basePrice, setBasePrice] = useState("");
  const [pickupCharges] = useState(50); // fixed value
  const [platformFees, setPlatformFees] = useState(0);
  const [actualLength, setActualLength] = useState("");
  const [actualHeight, setActualHeight] = useState("");



  useEffect(() => {
    async function loadUserAndArtist() {
      const { data: { user } } = await supabase.auth.getUser();
      setUser(user);
      if (!user) return;
      const { data: artist } = await supabase
        .from("artists")
        .select("id")
        .eq("user_id", user.id)
        .single();

      setArtistId(artist?.id || null);
    }
    loadUserAndArtist();
  }, []);
  useEffect(() => {
    const base = Number(basePrice);
    if (!isNaN(base) && base >= 0) {
      const fees = 0.075 * base;
      setPlatformFees(fees);
      const totalCost = roundToNearest9(base + pickupCharges + fees);
      setCost(totalCost.toString());
    } else {
      setPlatformFees(0);
      setCost("");
    }
  }, [basePrice, pickupCharges]);



  useEffect(() => {
    if (!productId) return;
    async function fetchArtwork() {
      const { data, error } = await supabase
        .from("artworks")
        .select("*")
        .eq("id", productId)
        .single();
      if (error) {
        alert("Failed to fetch artwork data to edit");
        navigate("/artist-profile");
        return;
      }
      if (data) {
        setTitle(data.title || "");
        setDescription(data.description || "");
        setCategory(data.category || "");
        setPickupAddress(data.pickupAddress || "")
        setCost(data.cost?.toString() || "");
        setMaterial(data.material || "");
        setPreviewUrls(Array.isArray(data.image_urls) ? data.image_urls : data.image_urls ? [data.image_urls] : []);
        setVideoPreview(data.video_url || "");
        setLength(data.length || " ");
        setHeight(data.Height || " ");
        setWeight(data.weight || " ");
        setWidth(data.width || " ");
        setActualLength(data.actual_length || "");
        setActualHeight(data.actual_height || "");

      }
    }
    fetchArtwork();
  }, [productId, navigate]);


  function handleImageChange(e) {
    const files = Array.from(e.target.files).slice(0, 3);
    const validFiles = files.filter((file) => file.size <= 10 * 1024 * 1024);
    if (validFiles.length < files.length) alert("Some images were ignored due to size limit.");
    setImages(validFiles);
    setPreviewUrls(validFiles.map((file) => URL.createObjectURL(file)));
  }

  function handleVideoChange(e) {
    const file = e.target.files[0];
    if (!file) return;
    if (file.size > 50 * 1024 * 1024) {
      alert("Video size must be less than 50MB");
      return;
    }
    setVideo(file);
    setVideoPreview(URL.createObjectURL(file));
  }

  async function uploadImages() {
    let urls = [];
    for (let i = 0; i < images.length; i++) {
      const file = images[i];
      const filename = `artworks/${Date.now()}_${file.name}`;
      await supabase.storage.from("artist-assets").upload(filename, file, { upsert: true });
      const { data } = supabase.storage.from("artist-assets").getPublicUrl(filename);
      urls.push(data.publicUrl);
    }
    return urls;
  }

  async function uploadVideo() {
    if (!video) return videoPreview || "";
    const filename = `artworks/videos/${Date.now()}_${video.name}`;
    await supabase.storage.from("artist-assets").upload(filename, video, { upsert: true });
    const { data } = supabase.storage.from("artist-assets").getPublicUrl(filename);
    return data.publicUrl;
  }
  function goToPrevImage() {
    setCurrentImageIndex((prev) =>
      prev > 0 ? prev - 1 : previewUrls.length - 1
    );
  }

  function goToNextImage() {
    setCurrentImageIndex((prev) =>
      prev < previewUrls.length - 1 ? prev + 1 : 0
    );
  }
  function zoomOut() {
    setZoom(prev => Math.max(prev - zoomStep, minZoom));
  }

  function zoomIn() {
    setZoom(prev => Math.min(prev + zoomStep, maxZoom));
  }


  async function handleSubmit(e) {
    e.preventDefault();

    if (!artistId) {
      alert("You must be registered as an artist.");
      return;
    }

    if (!title.trim()) {
      alert("Title is required.");
      return;
    }

    if (!category) {
      alert("Select a category.");
      return;
    }

    if (!cost || isNaN(Number(cost)) || Number(cost) <= 0) {
      alert("Valid cost is required.");
      return;
    }
    if (!pickupAddress.trim()) {
      alert("Pickup address is required.");
      return;
    }
    if (!length || !width || !height || !weight || !actualLength || !actualHeight) {
      alert("All dimensions (actual and after packing) are required.");
      return;
    }
    if (!basePrice || isNaN(Number(basePrice)) || Number(basePrice) < 0) {
      alert("Valid base price is required and cannot be negative.");
      return;
    }
    if (!productId && !video) {
      alert("Video upload is mandatory for new artworks.");
      return;
    }

    // For existing products, check if there's either an existing video or new video upload
    if (productId && !video && !videoPreview) {
      alert("Video is required. Please upload a video file.");
      return;
    }
    if (video) {
      const validVideoTypes = ['video/mp4', 'video/webm', 'video/ogg', 'video/avi', 'video/mov', 'video/wmv'];

      if (!validVideoTypes.includes(video.type)) {
        alert("Invalid video format. Please upload MP4, WebM, OGG, AVI, MOV, or WMV files only.");
        return;
      }

      // Check video file size (example: max 50MB)
      const maxVideoSize = 50 * 1024 * 1024; // 50MB in bytes
      if (video.size > maxVideoSize) {
        alert("Video file is too large. Please upload a video smaller than 50MB.");
        return;
      }

      // Updated video duration validation for 30 seconds maximum
      try {
        const videoDuration = await getVideoDuration(video);
        const maxDurationSeconds = 30; // 30 seconds max

        if (videoDuration > maxDurationSeconds) {
          alert(`Video duration exceeds ${maxDurationSeconds} seconds. Please upload a video of 30 seconds or less.`);
          return;
        }
      } catch (error) {
        console.error("Error validating video duration:", error);
        alert("Error validating video file. Please try uploading a different video.");
        return;
      }
    }

    setLoading(true);

    try {
      // Upload new images if any
      const uploadedImageUrls = images.length > 0 ? await uploadImages() : previewUrls;

      // Upload video if changed or new uploaded
      const uploadedVideoUrl = video ? await uploadVideo() : videoPreview;

      if (productId) {
        // Update existing artwork
        const { error: artworkError } = await supabase
          .from("artworks")
          .update({
            title: title.trim(),
            description,
            category,
            base_price: Number(basePrice),
            cost: Number(cost),
            material,
            pickupAddress,
            image_urls: uploadedImageUrls,
            video_url: uploadedVideoUrl,
            updated_at: new Date().toISOString(),
            length: Number(length),
            width: Number(width),
            height: Number(height),
            weight: Number(weight),
            actual_length: Number(actualLength),
            actual_height: Number(actualHeight),




          })
          .eq("id", productId);

        if (artworkError) throw artworkError;
      } else {
        // Insert new artwork
        const { data: newArtwork, error: artworkError } = await supabase
          .from("artworks")
          .insert({
            artist_id: artistId,
            title: title.trim(),
            description,
            category,
            base_price: Number(basePrice),
            cost: Number(cost),
            material,
            pickupAddress,
            image_urls: uploadedImageUrls,
            video_url: uploadedVideoUrl,
            created_at: new Date().toISOString(),
            length: Number(length),
            width: Number(width),
            height: Number(height),
            weight: Number(weight),
            actual_length: Number(actualLength),
            actual_height: Number(actualHeight),
          })
          .select()


        if (artworkError) throw artworkError;
        const { data: artistData, error: fetchError } = await supabase
          .from("artists")
          .select("artwork_count")
          .eq("id", artistId)
          .single();

        if (!fetchError && artistData) {
          const newCount = (artistData.artwork_count || 0) + 1;
          const { error: updateError } = await supabase
            .from("artists")
            .update({ artwork_count: newCount })
            .eq("id", artistId);
          if (updateError) console.error("Artwork count update failed:", updateError);
        }

      }

      setTitle("");
      setDescription("");
      setCategory("");
      setCost("");
      setPickupAddress("")
      setMaterial("");
      setImages([]);
      setPreviewUrls([]);
      setVideo(null);
      setVideoPreview("");

      onUploadSuccess && onUploadSuccess();

      // Navigate back to profile
      navigate(`/artist-profile?id=${artistId}`);

    } catch (error) {
      alert("Upload failed: " + error.message);
    } finally {
      setLoading(false);
    }
  }
  // const addressInputRef = useGoogleAutocomplete((address) => {
  //   setPickupAddress(address);
  // });



  return (
    <div className="pt-20 max-w-6xl mx-auto p-6 bg-white shadow-xl rounded-2xl">
      <h2 className="text-2xl font-bold mb-6 text-gray-800">
        {productId ? "Edit Artwork" : "Upload Artwork"}
      </h2>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Top Section: Responsive grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Side */}
          <div className="space-y-5">
            {/* Title */}
            <div>
              <label className="block font-semibold text-gray-700 mb-1">Title *</label>
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Enter title"
                required
                className="w-full border rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Description */}
            <div>
              <label className="block font-semibold text-gray-700 mb-1">Description</label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Enter description"
                rows={3}
                className="w-full border rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Category */}
            <div>
              <label className="block font-semibold text-gray-700 mb-1">Category *</label>
              <select
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                required
                className="w-full border rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Select category</option>
                {selectableCategories.map((cat) => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
            </div>

            {/* Material */}
            <div>
              <label className="block font-semibold text-gray-700 mb-1">Material</label>
              <input
                type="text"
                value={material}
                onChange={(e) => setMaterial(e.target.value)}
                placeholder="Enter material"
                className="w-full border rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Pickup Address */}
            {/* <APIProvider apiKey={import.meta.env.VITE_APP_GOOGLE_MAPS_API_KEY}>
              <div>
                <label className="block font-semibold text-gray-700 mb-1">
                  Pickup Address <span className="text-red-500">*</span>{" "}
                  <span className="text-xs text-gray-400">(with Pin code, precise)</span>
                </label>
                <AddressAutocomplete
                  value={pickupAddress}
                  onChange={(e) => setPickupAddress(e.target.value)}
                  onAddressSelect={(address) => setPickupAddress(address)}
                />
              </div>
            </APIProvider> */}
            <div>
              <label className="block font-semibold text-gray-700 mb-1">
                Pickup Address <span className="text-red-500">*</span>{" "}
                <span className="text-xs text-gray-400">(with Pin code, precise)</span>
              </label>
              <textarea
                value={pickupAddress}
                onChange={(e) => setPickupAddress(e.target.value)}
                placeholder="Enter pickup address"
                rows={3}
                required
                className="w-full border rounded-lg px-4 py-2 text-sm focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <br />



            <div className="mb-6">
              <label htmlFor="video-input" className="block text-sm font-medium text-gray-700 mb-2">
                Video Upload <span className="text-red-500">*</span>
                <span className="text-xs text-gray-500 ml-1">(Required - Max 30 seconds)</span>
              </label>

              <input
                id="video-input"
                type="file"
                accept="video/mp4,video/webm,video/ogg,video/avi,video/mov,video/wmv"
                onChange={handleVideoChange}
                required={!videoPreview} // Required if no existing video
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${!video && !videoPreview
                  ? 'border-red-300 bg-red-50'
                  : 'border-gray-300'
                  }`}
              />

              {!video && !videoPreview && (
                <p className="mt-2 text-sm text-red-600 flex items-center">
                  <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  Video upload is mandatory (max 30 seconds)
                </p>
              )}

              {videoPreview && (
                <div className="mt-4">
                  <video
                    controls
                    width="300"
                    className="max-w-full rounded-lg shadow-md"
                    onLoadedMetadata={(e) => {
                      const duration = Math.round(e.target.duration);
                      console.log(`Video duration: ${duration} seconds`);
                    }}
                  >
                    <source src={videoPreview} />
                    Your browser does not support video preview.
                  </video>
                  <div className="mt-2 text-sm text-green-600 flex items-center">
                    <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    Video selected successfully
                  </div>
                </div>
              )}

              <div className="mt-3 p-3 bg-gray-50 rounded-md">
                <div className="text-xs text-gray-600">
                  <div className="font-medium mb-1">📋 Video Requirements:</div>
                  <div className="space-y-1">
                    <div>• <span className="font-medium">Formats:</span> MP4, WebM, OGG, AVI, MOV, WMV</div>
                    <div>• <span className="font-medium">Max file size:</span> 10MB</div>
                    <div>• <span className="font-medium">Max duration:</span> 30 seconds</div>
                  </div>
                </div>
              </div>
            </div>

          </div>

          {/* Right Side */}
          <div className="space-y-6">
            {/* Dimensions */}
            <div>
              <label className="block font-semibold text-gray-700 mb-2">
                Artwork Dimensions <span className="text-xs text-gray-400">(after packing)</span>
              </label>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <input
                  type="number"
                  value={length}
                  onChange={e => setLength(e.target.value)}
                  placeholder="Length (cm)"
                  min="1"
                  required
                  className="border rounded-lg px-4 py-2 text-sm"
                />
                <input
                  type="number"
                  value={width}
                  onChange={e => setWidth(e.target.value)}
                  placeholder="Width (cm)"
                  min="1"
                  required
                  className="border rounded-lg px-4 py-2 text-sm"
                />
                <input
                  type="number"
                  value={height}
                  onChange={e => setHeight(e.target.value)}
                  placeholder="Height (cm)"
                  min="1"
                  required
                  className="border rounded-lg px-4 py-2 text-sm"
                />
                <input
                  type="number"
                  value={weight}
                  onChange={e => setWeight(e.target.value)}
                  placeholder="Weight (kg)"
                  min="0.1"
                  step="any"
                  required
                  className="border rounded-lg px-4 py-2 text-sm"
                />
              </div>
            </div>
            <div>
              <label className="block font-semibold text-gray-700 mb-2">Length (cm)</label>
              <div className="grid grid-cols-2 gap-2">
                <input
                  type="number"
                  value={actualLength}
                  onChange={e => setActualLength(e.target.value)}
                  placeholder="Actual"
                  min="1"
                  required
                  className="border rounded-lg px-4 py-2 text-sm"
                />
              </div>
            </div>
            <div>
              <label className="block font-semibold text-gray-700 mb-2">Height (cm)</label>
              <div className="grid grid-cols-2 gap-2">
                <input
                  type="number"
                  value={actualHeight}
                  onChange={e => setActualHeight(e.target.value)}
                  placeholder="Actual"
                  min="1"
                  required
                  className="border rounded-lg px-4 py-2 text-sm"
                />
              </div>
            </div>

            {/* Price & Cost */}
            <div className="space-y-4">
              <div className="flex flex-col sm:flex-row sm:items-center gap-2">
                <label className="sm:w-40 font-medium text-gray-700">Base Price *</label>
                <input
                  type="number"
                  min="0"
                  step="any"
                  value={basePrice}
                  onChange={(e) => setBasePrice(e.target.value)}
                  required
                  className="flex-1 border rounded-lg px-4 py-2 text-sm"
                />
              </div>

              <div className="flex flex-col sm:flex-row sm:items-center gap-2">
                <label className="sm:w-40 font-medium text-gray-700">Pickup Charges</label>
                <input
                  type="text"
                  value={pickupCharges}
                  readOnly
                  className="flex-1 border rounded-lg px-4 py-2 text-sm bg-gray-50"
                />
              </div>

              <div className="flex flex-col sm:flex-row sm:items-center gap-2">
                <label className="sm:w-40 font-medium text-gray-700">Platform Fees</label>
                <input
                  type="text"
                  value={platformFees.toFixed(2)}
                  readOnly
                  className="flex-1 border rounded-lg px-4 py-2 text-sm bg-gray-50"
                />
              </div>

              <div className="flex flex-col sm:flex-row sm:items-center gap-2">
                <label className="sm:w-40 font-medium text-gray-700">Cost for Buyer</label>
                <input
                  type="text"
                  value={cost}
                  readOnly
                  className="flex-1 border rounded-lg px-4 py-2 text-sm bg-gray-50"
                />
              </div>
            </div>
            <div className="mb-6">
              <label className="block font-semibold text-gray-700 mb-2">
                Upload Images (Max 3, under 10MB) <br />
                <span className="text-xs text-gray-500">
                  *Don't upload with any social media ID tag or watermark — one will be provided by our platform
                </span>
              </label>

              <input
                type="file"
                multiple
                accept="image/*"
                onChange={handleImageChange}
                className="block w-full text-sm text-gray-700 border border-gray-300 rounded-md cursor-pointer bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-4"
              />

              <div className="flex gap-3 flex-wrap">
                {previewUrls.map((url, i) => (
                  <img
                    key={i}
                    src={url}
                    alt={`preview-${i}`}
                    className="w-28 h-28 object-cover rounded-lg shadow cursor-pointer hover:scale-105 transition-transform duration-300"
                    onClick={() => {
                      setCurrentImageIndex(i);
                      setImageViewerOpen(true);
                    }}
                  />
                ))}
              </div>
            </div>


          </div>


        </div>





        {/* Submit Button */}
        <button
          type="submit"
          disabled={loading}
          className="mx-auto block w-48 py-3 bg-yellow-500 hover:bg-yellow-600 text-white font-bold text-lg rounded-lg transition disabled:opacity-50"
        >
          {loading
            ? (productId ? "Updating..." : "Uploading...")
            : productId
              ? "Update Artwork"
              : "Upload Artwork"}
        </button>

      </form>

      {/* Image Viewer Modal */}
      {imageViewerOpen && (
        <div
          onClick={() => setImageViewerOpen(false)}
          className="fixed inset-0 w-screen h-screen bg-black bg-opacity-80 flex justify-center items-center z-[10000] select-none"
        >
          <div
            onClick={e => e.stopPropagation()}
            className="relative max-w-[90vw] max-h-[90vh] flex flex-col items-center"
          >
            {/* Close Button - Enhanced Cross Mark */}
            <button
              onClick={() => setImageViewerOpen(false)}
              className="absolute top-3 right-3 z-10 w-10 h-10 bg-black bg-opacity-50 hover:bg-opacity-70 rounded-full flex items-center justify-center text-white text-2xl font-bold cursor-pointer transition-all duration-200 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black"
              aria-label="Close image viewer"
            >
              <svg
                className="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={3}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>

            <img
              src={previewUrls[currentImageIndex]}
              alt={`artwork-viewer-${currentImageIndex}`}
              className="max-w-full max-h-[80vh] rounded-lg shadow-2xl select-none transition-transform duration-300 ease-in-out"
              style={{
                transform: `scale(${zoom})`,
                boxShadow: '0 0 30px rgba(255,255,255,0.3)',
              }}
              draggable={false}
            />

            {/* Controls */}
            <div className="mt-4 flex gap-3 items-center">
              <button
                onClick={goToPrevImage}
                className="px-4 py-2 text-xl bg-white bg-opacity-20 hover:bg-opacity-30 text-white rounded-lg cursor-pointer transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-white"
                aria-label="Previous image"
              >
                ‹
              </button>

              <button
                onClick={zoomOut}
                disabled={zoom <= minZoom}
                className={`px-4 py-2 text-sm bg-white bg-opacity-20 hover:bg-opacity-30 text-white rounded-lg transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-white ${zoom <= minZoom ? 'cursor-not-allowed opacity-50 hover:scale-100' : 'cursor-pointer'
                  }`}
                aria-label="Zoom out"
              >
                −
              </button>

              <span className="text-white font-semibold text-sm bg-black bg-opacity-30 px-3 py-2 rounded-lg">
                {(zoom * 100).toFixed(0)}%
              </span>

              <button
                onClick={zoomIn}
                disabled={zoom >= maxZoom}
                className={`px-4 py-2 text-sm bg-white bg-opacity-20 hover:bg-opacity-30 text-white rounded-lg transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-white ${zoom >= maxZoom ? 'cursor-not-allowed opacity-50 hover:scale-100' : 'cursor-pointer'
                  }`}
                aria-label="Zoom in"
              >
                +
              </button>

              <button
                onClick={goToNextImage}
                className="px-4 py-2 text-xl bg-white bg-opacity-20 hover:bg-opacity-30 text-white rounded-lg cursor-pointer transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-white"
                aria-label="Next image"
              >
                ›
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
